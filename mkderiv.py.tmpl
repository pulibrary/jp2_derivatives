#!/usr/bin/python
#-*-coding: utf-8-*-
"""
Utility for generating derivative images for the PUDL website.

For safety, this should be run be a user that has read-only access to the source
file system (i.e., source TIFFs).
"""
import os
import logging
import subprocess
from datetime import datetime

#######################################
# Common options
PUDL_LOCATORS = [
    "pudl0004","pudl0006","pudl0007","pudl0008","pudl0009","pudl0010","pudl0011","pudl0012"
]
KDU_RECIPE_KEY = '10_1' # '10_1','20_1','lossless'
IMAGEMAGICK_SIZE_KEY = 'full' # "full" or "3600"
SOURCE_ROOT = ""
TARGET_ROOT = ""
OVERWRITE_EXISTING = False
THREADS = '12'
LOG_TO = 'console' # "console" or "file"

#######################################
# Installations. May need to adjust these
EXIV2 = "/usr/bin/exiv2"
CONVERT = "/usr/bin/convert"
KDU_COMPRESS_DIR = "/usr/local/bin"
KDU_LIB_DIR = "/usr/local/lib"
SRGB_ICC = "/usr/share/color/icc/colord/sRGB.icc"

TMP_DIR = "/tmp"

IMAGEMAGICK_RECIPES = {}
if IMAGEMAGICK_SIZE_KEY == 'full':
    IMAGEMAGICK_RECIPES['color'] = " -quality 100 -profile %s" % (SRGB_ICC,)
    IMAGEMAGICK_RECIPES['gray'] = " -colorspace Gray -quality 100"
else:
    IMAGEMAGICK_RECIPES['color'] = " -resize 3600x3600\> -quality 100 -profile %s" % (SRGB_ICC,)
    IMAGEMAGICK_RECIPES['gray'] = " -resize 3600x3600\> -quality 100 -colorspace Gray"

KDU_RECIPES = {
    '10_1_gray' : "\
-rate 2.4,1.48331273,.91673033,.56657224,.35016049,.21641118,.13374944,.08266171 \
 Creversible=yes Clevels=7 Cblk=\{64,64\} \
 -jp2_space sLUM \
 Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R \
 Stiles=\{1024,1024\} \
-double_buffering 10 \
-num_threads %s \
-no_weights \
-quiet" % (THREADS,),

    '10_1_color' : "\
-rate 2.4,1.48331273,.91673033,.56657224,.35016049,.21641118,.13374944,.08266171 \
 Creversible=yes Clevels=7 Cblk=\{64,64\} \
 -jp2_space sRGB \
 Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R \
 Stiles=\{1024,1024\} \
-double_buffering 10 \
-num_threads %s \
-no_weights \
-quiet" % (THREADS,),

    '20_1_gray': "\
-rate 1.2,0.7416334477,0.4583546103,0.2832827752,0.1750776907,0.1082041271,0.0668737897,0.0413302129 \
 Creversible=yes Clevels=7 Cblk=\{64,64\} \
-jp2_space sLUM \
 Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R \
 Stiles=\{1024,1024\} \
-double_buffering 10 \
-num_threads %s \
-no_weights \
-quiet" % (THREADS,),

    '20_1_color': "\
-rate 1.2,0.7416334477,0.4583546103,0.2832827752,0.1750776907,0.1082041271,0.0668737897,0.0413302129 \
 Creversible=yes Clevels=7 Cblk=\{64,64\} \
-jp2_space sRGB \
 Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R \
 Stiles=\{1024,1024\} \
-double_buffering 10 \
-num_threads %s \
-no_weights \
-quiet" % (THREADS,),

    'lossless_gray' : "\
-rate -,2.4,1.48331273,.91673033,.56657224,.35016049,.21641118,.13374944,.08266171 \
 Creversible=yes Clevels=7 Cblk=\{64,64\} \
 -jp2_space sLUM \
 Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R \
 Stiles=\{1024,1024\} \
-double_buffering 10 \
-num_threads %s \
-no_weights \
-quiet" % (THREADS,),

    'lossless_color' : "\
-rate -,2.4,1.48331273,.91673033,.56657224,.35016049,.21641118,.13374944,.08266171 \
 Creversible=yes Clevels=7 Cblk=\{64,64\} \
 -jp2_space sRGB \
 Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R \
 Stiles=\{1024,1024\} \
-double_buffering 10 \
-num_threads %s \
-no_weights \
-quiet" % (THREADS,)


}

EXIV2_GET_BPS = "-Pt -g Exif.Image.BitsPerSample print"

################################################################################
# Code. Leave this alone :). ###################################################
################################################################################

ENV = {"LD_LIBRARY_PATH":KDU_LIB_DIR, "PATH":KDU_COMPRESS_DIR + ":$PATH"}
TWENTY_FOUR_BITS = "8 8 8"
EIGHT_BITS = "8"

# Logging
log = logging.getLogger("DerivativeMaker")
log.setLevel(logging.DEBUG)

format = '%(asctime)s %(levelname)-5s: %(message)s'
dateFormat = '%Y-%m-%dT%H:%M:%S'

formatter = logging.Formatter(format, dateFormat)

if LOG_TO == 'file':
    now = datetime.now()
    logdir = "logs/" + now.strftime("%Y/%m/%d/")
    if not os.path.exists(logdir): os.makedirs(logdir)

    time = now.strftime("%H:%M:%S")

    # OUT
    outFilePath = logdir + time + "-out.log"
    out = logging.FileHandler(outFilePath)
    out.setLevel(logging.INFO)
    out.setFormatter(formatter)
    log.addHandler(out)

    # ERR
    errFilePath = logdir + time + "-err.log"
    err = logging.FileHandler(errFilePath)
    err.setLevel(logging.ERROR)
    err.setFormatter(formatter)
    log.addHandler(err)
else:
    sh = logging.StreamHandler()
    sh.setLevel(logging.INFO)
    sh.setFormatter(formatter)
    log.addHandler(sh)

class DerivativeMaker(object):
    def __init__(self):
        self.__files = []
    
    @staticmethod
    def _dirFilter(dir_name):
        return not dir_name.startswith(".")
    
    @staticmethod
    def _tiffFilter(file_name):
        return file_name.endswith(".tif") and not file_name.startswith(".")
    
    @staticmethod
    def _changeExtension(oldPath, newExtenstion):
        """
        Given a path with an image at the end (e.g., foo/bar/00000007.tif)
        and a new extension (e.g. ".jpg") returns the path with the new 
        extension (e.g., foo/bar/00000007.jpg
        """
        lastStop = oldPath.rfind(".")
        return oldPath[0:lastStop] + newExtenstion
    
    def buildFileList(self):
        for l in PUDL_LOCATORS:
            self._buildFileList(locator=l)
    
    def _buildFileList(self, locator=None, dir=None):
        if dir == None: 
            dir = os.path.join(SOURCE_ROOT, locator)
        
        for node in os.listdir(dir):
            absPath = os.path.join(dir, node)
            
            if os.path.isdir(absPath) and DerivativeMaker._dirFilter(node):
                 self._buildFileList(dir=absPath) #recursive call
            elif os.path.isfile(absPath) and DerivativeMaker._tiffFilter(node):
                self.__files.append(absPath)
            else:
                pass
                    
    def makeDerivs(self):
        self.__files.sort()
        n=1
        for tiffPath in self.__files:
            
            bps = DerivativeMaker._getBitsPerSample(tiffPath)
            
            outTmpTiffPath = TMP_DIR + tiffPath[len(SOURCE_ROOT):]

            outJp2WrongExt = TARGET_ROOT + outTmpTiffPath[len(TMP_DIR):]
            outJp2Path = DerivativeMaker._changeExtension(outJp2WrongExt, ".jp2")

            if not os.path.exists(outJp2Path) or OVERWRITE_EXISTING == True: 
                tiffSuccess = DerivativeMaker._makeTmpTiff(tiffPath, outTmpTiffPath, bps)
                if tiffSuccess:
                    DerivativeMaker._makeJp2(outTmpTiffPath, outJp2Path, bps, n)
                    os.remove(outTmpTiffPath)
                    log.debug("Removed temporary file: " + outTmpTiffPath)
                    n+=1
                else:
                    os.remove(outTmpTiffPath)    
            else:
                log.warn("File exists: " + outJp2Path)

    @staticmethod
    def _makeTmpTiff(inPath, outPath, inBitsPerSample):
        '''
        Returns the path to the TIFF that was created.
        '''
        #TODO: untested
        newDirPath = os.path.dirname(outPath)
        if not os.path.exists(newDirPath): os.makedirs(newDirPath, 0755)
        
        cmd = CONVERT + " " + inPath  
        if inBitsPerSample == TWENTY_FOUR_BITS:
            cmd = cmd + " " + IMAGEMAGICK_RECIPES['color']
        elif inBitsPerSample == EIGHT_BITS:
            cmd = cmd + " " + IMAGEMAGICK_RECIPES['gray']
        else:
            log.error("Could not get bits per sample: " + outPath)
            return False
        cmd = cmd + " " + outPath

        proc = subprocess.Popen(cmd, shell=True, \
            stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        return_code = proc.wait()
        
        # Read from pipes
        for line in proc.stdout:
            log.info(line.rstrip())
        for line in proc.stderr:
            if 'wrong data type 7' not in line:
                log.error(line.rstrip() + " (" + outPath + ")") 
                            
        if os.path.exists(outPath) and os.path.getsize(outPath) != 0:
            log.debug("Created temporary file: " + outPath)
            return True
        else:
            if os.path.exists(outPath): os.remove(outPath)
            log.error("Failed to create temporary file: " + outPath)
            return False

    @staticmethod
    def _makeJp2(inPath, outPath, inBitsPerSample, log_num=None):
        '''
        Returns the path to the TIFF that was created.
        '''
        #TODO: untested
        newDirPath = os.path.dirname(outPath)
        if not os.path.exists(newDirPath): os.makedirs(newDirPath, 0755)
        
        cmd = "kdu_compress -i " + inPath + " -o " + outPath 
        if inBitsPerSample == TWENTY_FOUR_BITS:
            cmd = cmd + " " + KDU_RECIPES[KDU_RECIPE_KEY+'_color']
        elif inBitsPerSample == EIGHT_BITS:
            cmd = cmd + " " + KDU_RECIPES[KDU_RECIPE_KEY+'_gray']
        else:
            log.error("Could not get bits per sample: " + outPath)
            return False
        
        proc = subprocess.Popen(cmd, shell=True, env=ENV, \
                stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        return_code = proc.wait()
        
        # Read from pipes
        for line in proc.stdout:
            log.info(line.rstrip())
            
        for line in proc.stderr:
            log.error(line.rstrip() + " (" + outPath + ")") 
            
        if os.path.exists(outPath) and os.path.getsize(outPath) != 0:
            if log_num:
                log.info("Created: (%d) %s" % (log_num, outPath))
            else:
                log.info("Created: " + outPath)
            os.chmod(outPath, 0644)
            return True
        else:
            if os.path.exists(outPath): os.remove(outPath)
            log.error("Failed to create: " + outPath)
            return False
        
    @staticmethod
    def _getBitsPerSample(inPath):
        cmd = EXIV2 + " " + EXIV2_GET_BPS + " " + inPath
        
        proc = subprocess.Popen(cmd, shell=True, env=ENV, \
                stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        return_code = proc.wait()
        
        # Read from pipes
        response = None
        for line in proc.stdout:
            if response == None:
                response = line.rstrip()
        for line in proc.stderr:
            log.error(line.rstrip() + " (" + inPath + ")") 
            
        return response
        
if __name__ == "__main__":
    
    dMaker = DerivativeMaker()
    dMaker.buildFileList()
    dMaker.makeDerivs()
    if LOG_TO == 'file':
        for handler in  logging.getLogger("DerivativeMaker").handlers:
            path = handler.baseFilename
            if os.path.getsize(path) == 0:
                os.remove(path)
                os.sys.stdout.write("Removed empty log: " + path + "\n")

